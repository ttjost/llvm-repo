//===-------- VEXSubtarget.h - VEX Subtarget  -------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef VEXSUBTARGET_H
#define VEXSUBTARGET_H

#include "VEXFrameLowering.h"
#include "VEXISelLowering.h"
#include "VEXInstrInfo.h"
#include "VEXSelectionDAGInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>
#include <memory>


#define GET_SUBTARGETINFO_HEADER
#include "VEXSubtargetInfo.cpp"

namespace llvm{

class StringRef;

class VEXTargetMachine;

    class VEXSubtarget : public VEXGenSubtargetInfo {
        virtual void anchor();
        
    public:
        
        enum VEXABIEnum{
            ABI32
        };
        
    protected:
        enum VEXArchEnum{
            VEX_I,
            VEX_II
        };
        
        VEXArchEnum VEXArchVersion;
        
        VEXABIEnum VEXABI;
        
        // Tells whether is the new Scheduling Algorithm to be used
        // Used for my dissertation (Tiago)
        bool isNewScheduling;
        bool EnableVLIWScheduling;

        InstrItineraryData InstrItins;
        
        // Relocation Model
        Reloc::Model RM;
        
        Triple TargetTriple;
        
        const VEXSelectionDAGInfo TSInfo;
        
        VEXInstrInfo InstrInfo;
        VEXFrameLowering FrameLowering;
        VEXTargetLowering TLInfo;
        
    public:
        unsigned getTargetABI() const { return VEXABI; }
        
        ///This constructor initializes the data members to match that
        /// of the specified triple
        VEXSubtarget(const std::string &TT, const std::string &CPU,
                     const std::string &FS, bool little, bool EnableVLIWScheduling,
                     Reloc::Model _RM, VEXTargetMachine &_TM);
        
        //- Virtual function, must have
        // ParseSubtargetFeatures - Parses features string settin specified
        // subtarget options. Definition of function is auto generated by tblgen
        void ParseSubtargetFeatures(StringRef CPU, StringRef FS);
        
        bool isVEXI() const { return VEXArchVersion == VEX_I; }
        
        bool isVEXII() const { return VEXArchVersion == VEX_II; }
        
        const InstrItineraryData *getInstrItineraryData() const { return &InstrItins; }
        
        bool abiUsesSoftFloat() const;
        
        // FIXME : Why is StackAlignment 8 ????
        unsigned stackAlignment() const {   return 8;   }
        
        VEXSubtarget &initializeSubtargetDependencies(StringRef CPU,
                                                      StringRef FS);
        
        const VEXSelectionDAGInfo *getSelectionDAGInfo() const { return &TSInfo; }
        
        const VEXInstrInfo *getInstrInfo() const { return &InstrInfo; }
        
        const TargetFrameLowering *getFrameLowering() const {
            return &FrameLowering;
        }
        
        const VEXRegisterInfo *getRegisterInfo() const override {
            return &InstrInfo.getRegisterInfo();
        }
        
        const VEXTargetLowering *getTargetLowering() const override { return &TLInfo; }
        
    };
}

#endif

